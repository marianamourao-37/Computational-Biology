function [P, b] = backward(x) 
%Implementation of backward algorithm according to same HMM as viterbi
%function. Implementation is similar to the latter, differing in that the
%dynamic programming matrix saves the backward probabilities and the path isn't saved. 
%P is the total probability of x sequence being generated by the HMM
%b is the dynamic programming matrix containing backward probability

%size of DNA sequence
N = length(x);

%number of states
Q=3;


%transition matrix

a=([0.6, 0.4, 0;
    0.25, 0.5, 0.25;
    0.25, 0.25, 0.5]);

%emission matrix
%columns correspond to nucleotides while rows correspond to hidden states
order='ATCG';

e=([0.4, 0.3, 0, 0.3;
    0.1, 0.1, 0.4, 0.4;
    0.4, 0.3, 0.3, 0]);


%initializing b matrix
b=zeros(Q,N);


b(:,N)=1;


%Recursive loop computing dynamic programming matrix according to backward
%algorithm's formula

i=N-1;

while (i>0)
   current_n = strfind(order,x(i+1));
   for k=1:Q
        b(k,i)= sum(e(:, current_n).*b(:,i+1).*a(k,:)');
   end
   i=i-1;
end

%Computation of total probability of x sequence taking into account the
%equal initial probabilities for all the states
P=sum((1/Q).*e(:,strfind(order,x(1))).*b(:,1));


end